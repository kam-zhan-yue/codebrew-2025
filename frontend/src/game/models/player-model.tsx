/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 ./public/models/player.glb -t
*/

import * as THREE from "three";
import React, { useEffect } from "react";
import { useGraph } from "@react-three/fiber";
import { useGLTF, useAnimations } from "@react-three/drei";
import { GLTF, SkeletonUtils } from "three-stdlib";
import usePrevious from "../utils";

export type PlayerAnimation =
  | "Armature|mixamo.com|Layer0"
  | "Armature|mixamo.com|Layer0.001";

interface GLTFAction extends THREE.AnimationClip {
  name: PlayerAnimation;
}

type GLTFResult = GLTF & {
  nodes: {
    red: THREE.SkinnedMesh;
    mixamorigHips: THREE.Bone;
  };
  materials: object;
  animations: GLTFAction[];
};

interface PlayerModelProps {
  animation: PlayerAnimation;
  position?: [number, number, number];
  rotation?: [number, number, number];
  scale?: number | [number, number, number];
}

export function PlayerModel({
  animation = "Armature|mixamo.com|Layer0",
  position = [0, 0, 0],
  rotation = [0, 0, 0],
  scale = 1,
}: PlayerModelProps) {
  const group = React.useRef<THREE.Group>(null!);
  const { scene, animations } = useGLTF("/models/player.glb");
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes } = useGraph(clone) as unknown as GLTFResult;
  const { actions } = useAnimations(animations, group);
  const previousAnimation = usePrevious(animation);

  useEffect(() => {
    if (!actions) return;
    if (previousAnimation && actions[previousAnimation]) {
      actions[previousAnimation].stop();
      actions[previousAnimation].fadeOut(0.2);
    }
    if (actions[animation]) {
      actions[animation]
        .reset()
        .fadeIn(0.2)
        .setLoop(THREE.LoopRepeat, Infinity)
        .play();
    }
  }, [actions, animation, previousAnimation]);

  return (
    <group
      ref={group}
      position={position}
      rotation={rotation}
      scale={scale}
      dispose={null}
    >
      <group name="Scene">
        <group
          name="jogging_with_box"
          rotation={[Math.PI / 2, 0, 0]}
          scale={2.56}
        >
          <primitive object={nodes.mixamorigHips} />
          <skinnedMesh
            name="red"
            geometry={nodes.red.geometry}
            material={nodes.red.material}
            skeleton={nodes.red.skeleton}
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/models/player.glb");
