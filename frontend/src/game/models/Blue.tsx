/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 ./public/models/blue.glb -t
*/

import * as THREE from "three";
import React, { useEffect } from "react";
import { useGraph } from "@react-three/fiber";
import { useGLTF, useAnimations } from "@react-three/drei";
import { GLTF, SkeletonUtils } from "three-stdlib";
import { PlayerAnimation } from "./player-model";
import usePrevious from "../utils";

interface GLTFAction extends THREE.AnimationClip {
  name: PlayerAnimation;
}

type GLTFResult = GLTF & {
  nodes: {
    redmesh001: THREE.SkinnedMesh;
    redmesh001_1: THREE.SkinnedMesh;
    redmesh001_2: THREE.SkinnedMesh;
    mixamorigHips: THREE.Bone;
  };
  materials: {
    astro_face: THREE.MeshStandardMaterial;
    Astro_helmet: THREE.MeshStandardMaterial;
    Astro_2: THREE.MeshStandardMaterial;
  };
  animations: GLTFAction[];
};

interface PlayerModelProps {
  animation: PlayerAnimation;
  position?: [number, number, number];
  rotation?: [number, number, number];
  scale?: number | [number, number, number];
}

export function BluePlayerModel({
  animation = "idle",
  position = [0, 0, 0],
  rotation = [0, 0, 0],
  scale = 1,
}: PlayerModelProps) {
  const group = React.useRef<THREE.Group>(null!);
  const { scene, animations } = useGLTF("/models/blue.glb");
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone) as unknown as GLTFResult;
  const { actions } = useAnimations(animations, group);
  const previousAnimation = usePrevious(animation);

  useEffect(() => {
    if (!actions) return;
    if (previousAnimation && actions[previousAnimation]) {
      actions[previousAnimation].stop();
    }
    if (actions[animation]) {
      actions[animation].setLoop(THREE.LoopRepeat, Infinity).play();
    }
  }, [actions, animation, previousAnimation]);

  return (
    <group
      ref={group}
      position={position}
      rotation={rotation}
      scale={scale}
      dispose={null}
    >
      <group name="Scene">
        <group name="Armature" rotation={[Math.PI / 2, 0, 0]}>
          <primitive object={nodes.mixamorigHips} />
          <group name="red">
            <skinnedMesh
              name="redmesh001"
              geometry={nodes.redmesh001.geometry}
              material={materials.astro_face}
              skeleton={nodes.redmesh001.skeleton}
            />
            <skinnedMesh
              name="redmesh001_1"
              geometry={nodes.redmesh001_1.geometry}
              material={materials.Astro_helmet}
              skeleton={nodes.redmesh001_1.skeleton}
            />
            <skinnedMesh
              name="redmesh001_2"
              geometry={nodes.redmesh001_2.geometry}
              material={materials.Astro_2}
              skeleton={nodes.redmesh001_2.skeleton}
            />
          </group>
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/models/blue.glb");
