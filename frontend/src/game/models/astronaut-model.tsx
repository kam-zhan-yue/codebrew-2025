/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 ./public/models/astronaut.glb -t
*/

import * as THREE from "three";
import React, { useEffect } from "react";
import { useGraph } from "@react-three/fiber";
import { useGLTF, useAnimations } from "@react-three/drei";
import { GLTF, SkeletonUtils } from "three-stdlib";
import usePrevious from "../../components/utils";

export type AstronautAnimation = "idle" | "tpose" | "walk";

interface GLTFAction extends THREE.AnimationClip {
  name: AstronautAnimation;
}

type GLTFResult = GLTF & {
  nodes: {
    Astronaut_mesh: THREE.SkinnedMesh;
    mixamorigHips: THREE.Bone;
  };
  materials: {
    Astronaut_matmat: THREE.MeshStandardMaterial;
  };
  animations: GLTFAction[];
};

interface AstronautModelProps {
  animation: AstronautAnimation;
  position?: [number, number, number];
  rotation?: [number, number, number];
  scale?: number | [number, number, number];
}

export function AstronautModel({
  animation = "tpose",
  position = [0, 0, 0],
  rotation = [0, 0, 0],
  scale = 1,
}: AstronautModelProps) {
  const group = React.useRef<THREE.Group>(null!);
  const { scene, animations } = useGLTF("/models/astronaut.glb");
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone) as unknown as GLTFResult;
  const { actions } = useAnimations(animations, group);
  const previousAnimation = usePrevious(animation);

  useEffect(() => {
    if (!actions) return;
    if (previousAnimation && actions[previousAnimation]) {
      actions[previousAnimation].stop();
      actions[previousAnimation].fadeOut(0.2);
    }
    if (actions[animation]) {
      actions[animation]
        .reset()
        .fadeIn(0.2)
        .setLoop(THREE.LoopRepeat, Infinity)
        .play();
    }
  }, [actions, animation, previousAnimation]);
  return (
    <group
      ref={group}
      position={position}
      rotation={rotation}
      scale={scale}
      dispose={null}
    >
      <group name="Scene">
        <group name="default" rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
        <group name="Armature" rotation={[Math.PI / 2, 0, 0]}>
          <primitive object={nodes.mixamorigHips} />
          <skinnedMesh
            name="Astronaut_mesh"
            geometry={nodes.Astronaut_mesh.geometry}
            material={materials.Astronaut_matmat}
            skeleton={nodes.Astronaut_mesh.skeleton}
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/models/astronaut.glb");
